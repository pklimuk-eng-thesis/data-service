// Code generated by mockery v2.23.2. DO NOT EDIT.

package service

import (
	domain "github.com/pklimuk-eng-thesis/data-service/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockACService is an autogenerated mock type for the ACService type
type MockACService struct {
	mock.Mock
}

type MockACService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockACService) EXPECT() *MockACService_Expecter {
	return &MockACService_Expecter{mock: &_m.Mock}
}

// AddNewRecordToACTable provides a mock function with given fields: isEnabled, temperature, humidity
func (_m *MockACService) AddNewRecordToACTable(isEnabled bool, temperature float32, humidity float32) error {
	ret := _m.Called(isEnabled, temperature, humidity)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool, float32, float32) error); ok {
		r0 = rf(isEnabled, temperature, humidity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockACService_AddNewRecordToACTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNewRecordToACTable'
type MockACService_AddNewRecordToACTable_Call struct {
	*mock.Call
}

// AddNewRecordToACTable is a helper method to define mock.On call
//   - isEnabled bool
//   - temperature float32
//   - humidity float32
func (_e *MockACService_Expecter) AddNewRecordToACTable(isEnabled interface{}, temperature interface{}, humidity interface{}) *MockACService_AddNewRecordToACTable_Call {
	return &MockACService_AddNewRecordToACTable_Call{Call: _e.mock.On("AddNewRecordToACTable", isEnabled, temperature, humidity)}
}

func (_c *MockACService_AddNewRecordToACTable_Call) Run(run func(isEnabled bool, temperature float32, humidity float32)) *MockACService_AddNewRecordToACTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool), args[1].(float32), args[2].(float32))
	})
	return _c
}

func (_c *MockACService_AddNewRecordToACTable_Call) Return(_a0 error) *MockACService_AddNewRecordToACTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockACService_AddNewRecordToACTable_Call) RunAndReturn(run func(bool, float32, float32) error) *MockACService_AddNewRecordToACTable_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestACRecordsLimitN provides a mock function with given fields: limit
func (_m *MockACService) GetLatestACRecordsLimitN(limit int) ([]domain.ACData, error) {
	ret := _m.Called(limit)

	var r0 []domain.ACData
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]domain.ACData, error)); ok {
		return rf(limit)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.ACData); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ACData)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockACService_GetLatestACRecordsLimitN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestACRecordsLimitN'
type MockACService_GetLatestACRecordsLimitN_Call struct {
	*mock.Call
}

// GetLatestACRecordsLimitN is a helper method to define mock.On call
//   - limit int
func (_e *MockACService_Expecter) GetLatestACRecordsLimitN(limit interface{}) *MockACService_GetLatestACRecordsLimitN_Call {
	return &MockACService_GetLatestACRecordsLimitN_Call{Call: _e.mock.On("GetLatestACRecordsLimitN", limit)}
}

func (_c *MockACService_GetLatestACRecordsLimitN_Call) Run(run func(limit int)) *MockACService_GetLatestACRecordsLimitN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockACService_GetLatestACRecordsLimitN_Call) Return(_a0 []domain.ACData, _a1 error) *MockACService_GetLatestACRecordsLimitN_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockACService_GetLatestACRecordsLimitN_Call) RunAndReturn(run func(int) ([]domain.ACData, error)) *MockACService_GetLatestACRecordsLimitN_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockACService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockACService creates a new instance of MockACService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockACService(t mockConstructorTestingTNewMockACService) *MockACService {
	mock := &MockACService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
